name: Semantic Release

on:
  push:
    branches:
      - main

permissions:
  contents: write
  pull-requests: write
  id-token: write

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: false

jobs:
  release:
    name: Semantic Release
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    environment:
      name: pypi
      url: https://pypi.org/p/bitfinex-maker-kit
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install python-semantic-release build
    
    - name: Configure Git
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
    
    - name: Python Semantic Release
      id: release
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        # Check if there are any releasable changes
        set -e  # Exit on error
        NEW_VERSION=$(semantic-release version --print 2>/dev/null || echo "")
        
        if [ -n "$NEW_VERSION" ]; then
          echo "New version detected: $NEW_VERSION"
          
          # Run semantic release with retry logic for network failures
          MAX_RETRIES=3
          RETRY_COUNT=0
          SUCCESS=false
          
          while [ $RETRY_COUNT -lt $MAX_RETRIES ] && [ "$SUCCESS" = "false" ]; do
            if semantic-release version --commit --tag --push; then
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
              echo "released=true" >> $GITHUB_OUTPUT
              SUCCESS=true
            else
              RETRY_COUNT=$((RETRY_COUNT + 1))
              if [ $RETRY_COUNT -lt $MAX_RETRIES ]; then
                echo "Semantic release failed (attempt $RETRY_COUNT/$MAX_RETRIES), retrying in 10 seconds..."
                sleep 10
              else
                echo "Semantic release failed after $MAX_RETRIES attempts"
                echo "released=false" >> $GITHUB_OUTPUT
                exit 1
              fi
            fi
          done
        else
          echo "No releasable changes detected"
          echo "released=false" >> $GITHUB_OUTPUT
        fi
    
    - name: Build distribution
      if: steps.release.outputs.released == 'true'
      run: python -m build
    
    - name: Publish to PyPI
      if: steps.release.outputs.released == 'true'
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
    
    - name: Create GitHub Release
      if: steps.release.outputs.released == 'true'
      env:
        GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        VERSION="v${{ steps.release.outputs.new_version }}"
        
        # Generate release notes from commits (robust tag discovery)
        PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
        if [ -z "$PREVIOUS_TAG" ]; then
          git log --oneline --no-merges HEAD -20 > commits.txt
        else
          git log --oneline --no-merges "$PREVIOUS_TAG..HEAD" > commits.txt
        fi
        
        # Create release body
        cat > release_notes.md << 'RELEASE_EOF'
        ## What's Changed
        
        This release was automatically generated based on conventional commits.
        
        ### Commits
        ```
        RELEASE_EOF
        
        cat commits.txt >> release_notes.md
        
        cat >> release_notes.md << RELEASE_EOF
        ```
        
        **Full Changelog**: https://github.com/${{ github.repository }}/compare/${PREVIOUS_TAG}...${VERSION}
        RELEASE_EOF
        
        # Create the GitHub release
        gh release create "$VERSION" \
          --title "Release $VERSION" \
          --notes-file release_notes.md \
          --target main
    
    - name: Summary
      if: always()
      run: |
        echo "## Semantic Release Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ steps.release.outputs.released }}" == "true" ]]; then
          echo "✅ **New version released:** v${{ steps.release.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Actions Performed" >> $GITHUB_STEP_SUMMARY
          echo "- Version bumped in pyproject.toml and __init__.py" >> $GITHUB_STEP_SUMMARY
          echo "- Git tag created and pushed" >> $GITHUB_STEP_SUMMARY
          echo "- Package published to PyPI" >> $GITHUB_STEP_SUMMARY
          echo "- GitHub Release created" >> $GITHUB_STEP_SUMMARY
        else
          echo "ℹ️ **No release needed** - No releasable changes detected" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "To trigger a release, ensure your commits follow conventional commit format:" >> $GITHUB_STEP_SUMMARY
          echo "- \`feat:\` for new features (minor version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`fix:\` for bug fixes (patch version bump)" >> $GITHUB_STEP_SUMMARY
          echo "- \`BREAKING CHANGE:\` in commit body for breaking changes (major version bump)" >> $GITHUB_STEP_SUMMARY
        fi
name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      github.repository == '0xferit/bitfinex-maker-kit' && (
        (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
        (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
        (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
      )
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
      pull-requests: read
      issues: read
      id-token: write
      actions: read # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2  # Allow some historical context

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read
          
          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4)
          # model: "claude-opus-4-20250514"
          
          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"
          
          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"
          
          # Allow Claude to run project-specific commands
          allowed_tools: "Bash(make quality),Bash(make test),Bash(make setup),Bash(make install),Bash(pytest tests/unit/),Bash(ruff check .),Bash(mypy bitfinex_maker_kit/),Bash(bandit -r bitfinex_maker_kit/)"
          
          # Custom instructions for bitfinex-maker-kit project
          custom_instructions: |
            This is a professional cryptocurrency trading toolkit with strict safety requirements:
            - All limit orders MUST use POST_ONLY flag (enforced architecturally)
            - Python 3.12+ required
            - Follow existing code patterns and domain-driven design
            - Ensure comprehensive test coverage (80%+ required)
            - Use existing quality tools (ruff, mypy, bandit, pytest)
            - Review CLAUDE.md for project-specific context
          
          # Optional: Custom environment variables for Claude
          # claude_env: |
          #   NODE_ENV: test


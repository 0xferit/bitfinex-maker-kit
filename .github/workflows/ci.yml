name: Continuous Integration

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  PYTHON_VERSION: "3.12"
  # Paper trading credentials for integration tests
  BFX_API_KEY: ${{ secrets.BFX_API_PAPER_KEY }}
  BFX_API_SECRET: ${{ secrets.BFX_API_PAPER_SECRET }}

jobs:
  lint-and-format:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ruff mypy types-psutil
        pip install -e .
    
    - name: Run Ruff checks (linting, formatting, imports)
      run: |
        ruff check bitfinex_maker_kit/ tests/
        ruff format --check bitfinex_maker_kit/ tests/
    
    - name: Run MyPy (type checking)
      run: mypy bitfinex_maker_kit/
    
    - name: Check file size limits (max 1000 lines)
      run: |
        echo "Checking that no Python file exceeds 1000 lines..."
        large_files=$(find bitfinex_maker_kit tests -name "*.py" -type f -exec wc -l {} \; | awk '$1 > 1000 {print $2 " (" $1 " lines)"}')
        if [ -n "$large_files" ]; then
          echo "❌ Files exceeding 1000 lines found:"
          echo "$large_files"
          echo ""
          echo "Please refactor these files to be under 1000 lines."
          echo "Consider breaking them into smaller, more focused modules."
          exit 1
        else
          echo "✅ All Python files are under 1000 lines"
        fi

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        python-version: ['3.12', '3.13']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run unit tests
      run: |
        pytest tests/unit/ -v --tb=short \
          --cov=bitfinex_maker_kit \
          --cov-report=xml \
          --cov-report=term-missing
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella-py${{ matrix.python-version }}

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run integration tests
      run: |
        pytest tests/integration/ -v --tb=short --maxfail=5
      env:
        BFX_API_KEY: ${{ secrets.BFX_API_PAPER_KEY || 'mock_paper_key' }}
        BFX_API_SECRET: ${{ secrets.BFX_API_PAPER_SECRET || 'mock_paper_secret' }}

  property-tests:
    name: Property-Based Tests
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run property-based tests
      run: |
        pytest tests/property/ -v --tb=short --hypothesis-show-statistics
      env:
        BFX_API_KEY: ${{ secrets.BFX_API_PAPER_KEY || 'mock_paper_key' }}
        BFX_API_SECRET: ${{ secrets.BFX_API_PAPER_SECRET || 'mock_paper_secret' }}

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run performance benchmarks
      run: |
        pytest tests/benchmarks/ -v --tb=short -m "benchmark" || echo "No benchmark tests found"
      env:
        BFX_API_KEY: ${{ secrets.BFX_API_PAPER_KEY || 'mock_paper_key' }}
        BFX_API_SECRET: ${{ secrets.BFX_API_PAPER_SECRET || 'mock_paper_secret' }}
    
    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: benchmark-results
        path: pytest-*.xml
        if-no-files-found: ignore

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
        pip install -e .
    
    - name: Run security scans
      run: |
        # Run security scans
        safety check --json > safety-report.json || true
        bandit -r bitfinex_maker_kit/ -f json -o bandit-report.json || true
      continue-on-error: true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          safety-report.json
          bandit-report.json
        if-no-files-found: ignore

  build-and-package:
    name: Build and Package
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    timeout-minutes: 10
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build and check package
      run: |
        python -m build
        twine check dist/*
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/

  load-tests:
    name: Load Tests
    runs-on: ubuntu-latest
    needs: [performance-tests]
    if: (github.event_name == 'pull_request' && github.base_ref == 'main') || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    timeout-minutes: 30
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run load tests (short duration for CI)
      run: |
        pytest tests/load/ -v --tb=short -k "not long_running" || echo "No load tests found"
      timeout-minutes: 15
      env:
        LOAD_TEST_DURATION: "short"
        BFX_API_KEY: ${{ secrets.BFX_API_PAPER_KEY || 'mock_paper_key' }}
        BFX_API_SECRET: ${{ secrets.BFX_API_PAPER_SECRET || 'mock_paper_secret' }}
    
    - name: Upload load test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: load-test-results
        path: pytest-*.xml
        if-no-files-found: ignore

  paper-trading-tests:
    name: Paper Trading Tests (Optional)
    runs-on: ubuntu-latest
    # Only run if paper trading secrets are available (on PRs from same repo or direct pushes)
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)
    timeout-minutes: 20
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ env.PYTHON_VERSION }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
        cache-dependency-path: 'pyproject.toml'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run paper trading tests
      run: |
        pytest tests/ -m "paper_trading" -v --tb=short --timeout=300 || echo "No paper trading tests found"
      env:
        BFX_API_KEY: ${{ secrets.BFX_API_PAPER_KEY || 'mock_paper_key' }}
        BFX_API_SECRET: ${{ secrets.BFX_API_PAPER_SECRET || 'mock_paper_secret' }}
        MAKER_KIT_ENVIRONMENT: TESTING